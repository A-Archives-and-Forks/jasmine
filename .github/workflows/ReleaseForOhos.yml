name: Release for ohos

on:
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  RUST_TOOLCHAIN: nightly-2025-02-15

jobs:
  build-core: 
    runs-on: ubuntu-latest
    container: ghcr.io/niuhuan/harmony-next-flutter-pipeline-docker/image:3.22.0-ohos
    steps:
      - name: checkout core
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: 'ComicSparks/jasmine-rs-core'
          path: 'native'
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - name: build-core
        run: |
          apt update
          apt install -y build-essential
          rustup target add aarch64-unknown-linux-ohos
          cargo install ohrs
          export OHOS_NDK_HOME=$OHOS_BASE_SDK_HOME
          cd native/jmbackend/platforms/ohos
          make
          find dist -type f -name "*.so" ! -name "librust" -exec rm -f {} \;
      - name: Upload Build Output
        uses: actions/upload-artifact@v4
        with:
          name: core-build-output
          path: native/jmbackend/platforms/ohos/dist

  build-and-upload-hap:
    needs: build-core
    runs-on: ubuntu-latest
    container: ghcr.io/niuhuan/harmony-next-flutter-pipeline-docker/image:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Build Output
        uses: actions/download-artifact@v4
        with:
          name: core-build-output
          path: native/jmbackend/platforms/ohos/dist
      - name: rsync
        run: |
          apt update
          apt install -y rsync build-essential pkg-config libssl-dev
          rsync -av --exclude oh-package.json5 native/jmbackend/platforms/ohos/dist/ ohos/entry/libs/
      - name: build hap
        run: |
          sed -i 's/  modal_bottom_sheet: \^3.0.0-pre/  modal_bottom_sheet:\n    git:\n      url: https:\/\/github.com\/niuhuan\/modal_bottom_sheet.git\n      ref: ohos\n      path: modal_bottom_sheet/g' pubspec.yaml
          cp scripts/ohos.images.bak lib/screens/components/images.dart
          cp ci/version.code.txt lib/assets/version.txt
          flutter build hap --target-platform=ohos-arm64
          cd ohos
          hvigorw assembleHap --release
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
  
          (type -p wget >/dev/null || (apt update && apt-get install wget -y)) \
          && mkdir -p -m 755 /etc/apt/keyrings \
          && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
          && cat $out | tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
          && chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && apt update \
          && apt install curl gh -y
          
          git config --global --add safe.directory $GITHUB_WORKSPACE
          
          export VERSION=$(cat ci/version.code.txt | xargs echo)
          asset_path=ohos/entry/build/default/outputs/default/entry-default-unsigned.hap
          asset_name="${{ github.event.repository.name }}-$VERSION-unsigned.hap"
          echo "Uploading asset $asset_name from $asset_path"
          mv "$asset_path" "$asset_name"
          gh release upload $VERSION "${asset_name}#${asset_name}" --clobber 

